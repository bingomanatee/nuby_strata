
/**
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;

/**
 * Expose `Suite`.
 */

exports = module.exports = Suite;

/**
 * Suite map.
 */

var map = {};

/**
 * Create a new `Suite` with the given `title`
 * and parent `Suite`. When a suite with the
 * same title is already present, that suite
 * is returned to provide nicer reporter
 * and more flexible meta-testing.
 *
 * @param {Suite} parent
 * @param {String} title
 * @return {Suite}
 * @api public
 */

exports.create = function(parent, title){
  var suite = new Suite(title);
  suite.parent = parent;
  title = suite.fullTitle();
  if (map[title]) return map[title];
  parent.addSuite(suite);
  return map[title] = suite;
};

/**
 * Initialize a new `Suite` with the given `title`.
 *
 * @param {String} title
 * @api private
 */

function Suite(title) {
  this.title = title;
  this.suites = [];
  this.tests = [];
  this.beforeAllCallbacks = [];
  this.beforeEachCallbacks = [];
  this.afterAllCallbacks = [];
  this.afterEachCallbacks = [];
  this.root = !title;
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

Suite.prototype.__proto__ = EventEmitter.prototype;

/**
 * Set timeout `ms` or short-hand such as "2s".
 *
 * @param {Number|String} ms
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.timeout = function(ms){
  if (String(ms).match(/s$/)) ms = parseFloat(ms) * 1000;
  this._timeout = parseInt(ms, 10);
  return this;
};

/**
 * Run `fn(test[, done])` before running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeAll = function(fn){
  this.beforeAllCallbacks.push(fn);
  this.emit('beforeAll', fn);
  return this;
};

/**
 * Run `fn(test[, done])` after running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterAll = function(fn){
  this.afterAllCallbacks.push(fn);
  this.emit('afterAll', fn);
  return this;
};

/**
 * Run `fn(test[, done])` before each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeEach = function(fn){
  this.beforeEachCallbacks.push(fn);
  this.emit('beforeEach', fn);
  return this;
};

/**
 * Run `fn(test[, done])` after each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterEach = function(fn){
  this.afterEachCallbacks.push(fn);
  this.emit('afterEach', fn);
  return this;
};

/**
 * Add a test `suite`.
 *
 * @param {Suite} suite
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addSuite = function(suite){
  suite.parent = this;
  if (this._timeout) suite.timeout(this._timeout);
  this.suites.push(suite);
  this.emit('suite', suite);
  return this;
};

/**
 * Add a `test` to this suite.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addTest = function(test){
  test.parent = this;
  if (this._timeout) test.timeout(this._timeout);
  this.tests.push(test);
  this.emit('test', test);
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Suite.prototype.fullTitle = function(){
  if (this.parent) {
    var full = this.parent.fullTitle();
    if (full) return full + ' ' + this.title;
  }
  return this.title;
};

/**
 * Return the total number of tests.
 *
 * @return {Number}
 * @api public
 */

Suite.prototype.total = function(){
  return this.suites.reduce(function(sum, suite){
    return sum + suite.total();
  }, 0) + this.tests.length;
};
