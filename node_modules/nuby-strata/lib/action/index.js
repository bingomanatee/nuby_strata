var path = require('path');
//console.log('st_path: %s', st_path);
var strata = require('./../../node_modules/strata');
var _ = require('./../../node_modules/underscore');
var util = require('util');

/**
 * Action is a stock template for handling action related actions.
 * @param config
 */

function Action(config) {
    _.extend(this, config);
    if (this.render_by_ct) {
        module.exports.render_by_ct(this);
    }
    if (this.error_by_ct) {
        module.exports.error_by_ct(this);
    }
    if (this.can_by_ct) {
        module.exports.can_by_ct(this);
    }
    if (this._layout_path && (!this.layout)) {
        module.exports.add_layout(this);
    }

    if (!this.hasOwnProperty('controller')){
        module.exports.ensure_controller(this);
    }
}

Action.prototype = {

    config:function (config) {
        if (config.hasOwnProperty('lang')) {
            this.lang = config.lang;
        }
    },

    controller:null,
    context: null,

    handle:function (type) {
        var nuby_strata = require('./../..');
        var def_handler = nuby_strata.loader.controller_loader('default');
        return def_handler.scaffolding['default'].handle(this, type);
    },

    data:function (env, callback) {
        console.log('getting data from default');
        callback(null, {});
    },

    render:function (env, callback) {
        return this.context.render(this._view_path, env, callback, this);
    },

    _view_path:null,

    error:function (params, callback) {
        strata.redirect.forward(params.env, callback, '/');
    },

    can:function (task, env, if_can, if_block) {
        if_can(env);
    }

}


module.exports = {
    Action:Action,
    create:function (controller, action_path, config) {
        if (!config) {
            config = {};
        }

        config.controller = controller;
        config.context    = controller.context;
        config.path       = action_path;

        var action = new Action(config);

        module.exports.ensure_view_path(action, action_path);
        return action;

    },

    add_layout:function (action) {
        action.layout = module.exports._layout;
    },

    _layout:function (env, out, callback) {
        env._action = this;
        this.context.layout(env, this._layout_path, out, callback);
    },

    _privatize:function (action, token) {
        if (action.hasOwnProperty(token)) {
            action['_' + token] = action[token];
            delete action[token];
        }
    },

    ensure_view_path:function (action, action_path) {
        if (!action._view_path) {
            action._view_path = action_path + '/view.html';
        }
    },

    render_by_ct:function (action) {
        module.exports._privatize(action, 'render');
        action.render = module.exports._render_by_ct;
    },

    _render_by_ct:function (params, callback) {
        params._action = this;
        this.controller.render(this._view_path ? this.view_path : '', params, callback, this);
    },

    error_by_ct:function (action) {
        module.exports._privatize(action, 'error');
        this.error = module.exports._error_by_ct
    },

    _error_by_ct:function (params, callback) {
        params._action = this;
        this.controller.error(params, callback);
    },

    can_by_ct:function (action) {
        module.exports._privatize(action, 'can');
        action.can = module.exports._action_can
    },

    action_can:function (task, env, if_can, if_block) {
        env.action = this;
        this.controller.can(task, env, if_can, if_block);
    },

    ensure_controller: function (action, config) {
        if (!config.hasOwnProperty('controller')) {
            var c_path = path.resolve(path.dirname(action.path), '/../controller');
            if (!path.existsSync(c_path + '.js')) {
                c_path = path.resolve(path.dirname(action.path), '/..');
                if (!path.existsSync(c_path + '/index.js')) {
                    c_path = '';
                }
            }
            if (c_path) {
                config.controller = require(c_path);
            }
        }
    }


}