var path = require('path');
var st_path = path.resolve(__dirname, './../../node_modules/strata');
//console.log('st_path: %s', st_path);
var strata = require(st_path);
var _ = require('./../../node_modules/underscore');
var util = require('util');

/**
 * Action is a stock template for handling action related actions.
 * @param config
 */

function Action(config) {
    _.extend(this, config);
    if (this.render_by_ct) {
        module.exports.render_by_ct(this);
    }
    if (this.error_by_ct) {
        module.exports.error_by_ct(this);
    }
    if (this.can_by_ct) {
        module.exports.can_by_ct(this);
    }
}

Action.prototype = {

    config: function(config){
        if (config.hasOwnProperty('lang')){
            this.lang = config.lang;
        }
    },

    controller:null,

    handle:function (type) {
        var ns_path = path.resolve(__dirname, './../..');
        var nuby_strata = require(ns_path);
        var def_handler = nuby_strata.loader.controller_loader('default');
        return def_handler.scaffolding['default'].handle(this, type);
    },

    data:function (env, callback) {
        console.log('getting data from default');
        callback(null, {});
    },

    render:function (params, callback) {
        var ns_path = path.resolve(__dirname, './../..');
        var nuby_strata = require(ns_path);
        return nuby_strata.render(this._view_path, params, callback, this);
    },

    _view_path:null,

    error:function (params, callback) {
        strata.redirect.forward(params.env, callback, '/');
    },

    can:function (task, env, if_can, if_block) {
        if_can(env);
    }

}


module.exports = {
    Action:Action,
    create:function (action_path, config) {
        if (!config) {
            config = {};
        }

        _ensure_controller(action_path, config);

        var action = new Action(config);

        module.exports._ensure_view_path(action, action_path);
        return action;

    },

    _ensure_view_path:function (action, action_path) {
        if (!action._view_path) {
            action._view_path = path.dirname(action_path) + '/view.html';
        }
    },
    render_by_ct:function (action) {
        action._action_render = action.render;
        action.render = function (params, callback) {
            params.action = action;
            action.controller.render(action._view_path, params, callback, this);
        }
    },
    error_by_ct:function (action) {
        action._action_error = action.error;
        action.error = function (params, callback) {
            params.action = action;
            action.error(params, callback);
        }
    },
    can_by_ct:function (action) {
        action._action_can = action.can;
        action_can = function (task, env, if_can, if_block) {
            env.action = action;
            action.controller.can(task, env, if_can, if_block);
        }
    }
}

function _ensure_controller(action_path, config) {
    if (!config.hasOwnProperty('controller')) {
        var c_path = path.resolve(path.dirname(action_path), '/../controller');
        if (!path.existsSync(c_path + '.js')) {
            c_path = path.resolve(path.dirname(action_path), '/..');
            if (!path.existsSync(c_path + '/index.js')) {
                c_path = '';
            }
        }
        if (c_path) {
            config.controller = require(c_path);
        }
    }
}