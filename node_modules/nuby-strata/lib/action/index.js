var path = require('path');
//console.log('st_path: %s', st_path);
var strata = require('./../../node_modules/strata');
var _ = require('./../../node_modules/underscore');
var util = require('util');
var action_utils = require('./action_utils');

/**
 * Action is a stock template for handling action related actions.
 * @param config
 */

function Action(config) {
    //  console.log('action on creation: %s', util.inspect(this));
    _.extend(this, config);
    this._init(this);
}

Action.prototype = {

    _init:function (action) {
        action_utils.update_action(action);
    },

    controller:null,
    context:null,

    header:function (env, values) {
        var out = {'Content-Type':'text/html'};
        if (values) {
            _.extend(out, values);
        }
        if (env.hasOwnProperty('_header')){
            _.extend(out, env._header);
        }
        return out;
    },

    handle:function (type) {
        var action = this;

        return function (env, app_callback) {
            if (action.context && action.context.tracer) {
                action.context.tracer.trace(env, 'handle');
            }
            env._handler_type = type;
            env._action = action;
            env._render_params = {};
            action._handle(env, app_callback);
        }
    },

    _handle:function (env, app_callback) {
       // console.log('handling: %s', util.inspect(env, true, 0));
        var action = this;

        function _on_params(err, params) {
           // console.log('_on_params - passing to action, %s, %s', util.inspect(err), util.inspect(params));
            action._on_params(err, params, env, app_callback);
        }

        /* !!! FIRST CALL -- starts callback chain */
        try {
            var req = new strata.Request(env);
            env._request = req;
          //  console.log('request = %s', util.inspect(req));
            req.params(_on_params);
        } catch (err) {
            console.log('error: %s', err.toString());
        }
    },

    _on_params:function (err, params, env, app_callback) {
        console.log('action._on_params');
        var action = this;

        if (err) {
            console.log(' ********************* error on params: %s', err.toString());
            return action.error(env, {err:err, type:'on_param_error', method:'_on_params'}, app_callback);
        }

        console.log('_on_params: params %s', util.inspect(params));

        if (action.hasOwnProperty('context') && action.context.hasOwnProperty('tracer')) {
            action.context.tracer.trace(env, '_on_params');
        }


        if (env.route) {
            //  console.log('_on_params route: %s', util.inspect(env.route, true, 3));
            for (var p in env.route) {
                switch (p) {
                    case "0":
                    case 0:
                    case "1":
                    case 1:
                    case "2":
                    case 2:
                    case "3":
                    case 3:
                    case "4":
                    case 4:
                    case "5":
                    case 5:
                        break;
                    default:
                        params[p] = env.route[p];
                }
            }

        }

        console.log('_on_params: %s', util.inspect(params));

        env._request_params = params;

        function _on_can() {
            console.log('can');
            function _on_data(err, data) {
                action._on_data(err, data, env, app_callback);
            }

            action.data(env, _on_data);
        }

        function _on_block(env) {
            console.log('blocked');
            action.error(env, {type:'auth', method:'_on_block'}, app_callback);
        }

        action.can('respond', env, _on_can, _on_block);
    },

    _data_to_env:function (env, data) {
        env._data = data;
    },

    _on_data:function (err, data, env, app_callback) {
        //    console.log('action::_on_data data = %s', util.inspect(data));
        //   console.log('app callback: %s', app_callback.toString());
        var action = this;

        if (err) {
            return action.error(env, {err:err, type:'data_error'}, app_callback);
        }

        action._data_to_env(env, data);
        if (action.context && action.context.tracer) {
            action.context.tracer.trace(env, '_on_data');
        }

        //  console.log('route %s has no format', util.inspect(env.route));

        function _on_render(err, content) {
            if (err) {
            } else {
                app_callback(200, action.header(env), content);
            }
        }

        this.render(env, _on_render);
    },

    /**
     * This method needs to be overridden in most cases.
     *
     * @param env
     * @param on_data_callback
     */
    data:function (env, on_data_callback) {
        on_data_callback(null, {});
    },

    render:function (env, on_render) {
        // console.log('render::on_render_callback: %s', on_render_callback.toString());
        var action = this;

        /**
         * note - _on_render (the local and action method)
         * only kicks in for unformatted data - i.e., not JSON, XML, etc.
         * Its role is to apply layouts, panels etc and thats not relevant for structured data.
         *
         * @param err
         * @param content: string
         */

        console.log('render: pathInfo == %s', env.pathInfo);

        if (env.route.hasOwnProperty('format')) {
            console.log('... has format');

            var format = env.route.format.toLowerCase();
            var data = env._data;
            var action = this;

            // console.log('base action _format; format = %s', util.inspect(format));

            switch (format) {
                case 'json':
                    try {
                        var content = JSON.stringify(data);
                        env._header = {'Content-Type':'application/json'};
                        on_render(null, content);
                    } catch (e) {
                        this.error(env, {type:'json cannot stringify data', method:'render'}, app_callback);
                    }
                    break;

                case 'htm':
                case 'html':
                    this.do_render(env, on_render);
                    break;

                default:
                    this.error(env, {type:'index_no_format', method:'render'}, on_render);

            }

        } else {
            console.log('... no format');
            this.do_render(env, on_render);
        }
    },

    /**
     * This method needs to be overridden to set env._render_params.
     * It is designed to pass on control to post_render, to enable any layout etc.
     *
     * @param env
     * @param on_render
     */
    do_render:function (env, on_render) {
        var action = this;
        if (action.post_render) {
            // note - in specialist overrides all you need to do (other than set _render_params)
            // is to pull from here...
            this.context.render(this._view_path, function (err, content) {
                env._render_params = {content: content};
                action.post_render(err, content, env, on_render);
            }, env, action);
            // ... to here
        } else {
            this.context.render(this._view_path, env, on_render, action);
        }
    },

    post_render:require('./post_render'),

    _view_path:null,

    error:function (env, params, callback) {
        console.log("========== ACTION ERROR: %s ========= \n %s",
            params.type, util.inspect(params)
        );
        strata.redirect.forward(env, callback, '/');
    },

    can:function (task, env, if_can, if_block) {
        // console.log('can: env._request_params = %s', JSON.stringify(env._request_params));
        if_can();
    }

}

module.exports = {
    Action:Action,
    create:function (controller, action_path, config) {
        if (!config) {
            config = {type:'default'};
        }

        config.controller = controller;
        config.context = controller.context;
        config.path = action_path;

        var action = new Action(config);
        //     console.log('instantiated action: %s', util.inspect(action, false, 2));
        return action;

    }


}
