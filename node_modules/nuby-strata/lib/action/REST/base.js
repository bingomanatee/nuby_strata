var action = require('./..');
var Action = action.Action;
var _ = require('./../../../node_modules/underscore');
var util = require('util');
var strata = require('./../../../node_modules/strata');

function Base_Action(config) {
    //  console.log('action on creation: %s', util.inspect(this));
    _.extend(this, config);
    this._init(this);
}

Base_Action.prototype = _.clone(Action.prototype);

Base_Action.prototype.data = function (env, on_data_callback) {
    if (!(typeof(on_data_callback) == 'function')) {
        throw new Error('no callback passed to Base_Action.data %s', util.inspect(on_data_callback));
    }
    var action = this;

    if (action.context && action.context.tracer) {
        action.context.tracer.trace(env, 'data');
    }

    if (env._request_params.hasOwnProperty('id')) {
        var id = parseInt(env._request_params.id);
        if (id) {
            this.controller.model.get_id(id, function (err, data) {
                //  console.log('edit - request retrieved id = %s, data = %s', env._request_params.id, JSON.stringify(data));
                action._on_get(err, data, env, on_data_callback);
            });
        } else {
            action.data_do(env, on_data_callback);
        }
    } else {
        action.data_do(env, on_data_callback);
    }

}

/**
 * this method executes when an id is not present -- as in for
 * put or list actions.
 * @param env
 * @param on_data_callback: function
 */
Base_Action.prototype.data_do = function (env, on_data_callback) {
    on_data_callback(new Error('must override base action data_do'));
}

Base_Action.prototype._on_get = function (err, data, env, on_data_callback) {
    on_data_callback(err, data);
}

Base_Action.prototype.rest_name = function () {
    return this.controller.name;
}

Base_Action.prototype.render = function (env, callback) {

    if (this.context && this.context.tracer) {
        this.context.tracer.trace(env, 'render');
    }

    var action = this;

    function _on_ticket(err, ticket) {
        env._render_params.ticket = ticket;
        action.context.render(action._view_path, env._render_params, callback, action);
    }

    if (this.ticket) {
        env._render_params.ticket = this.ticket(env._render_params.data);
    } else if (this.controller.ticket) {
        this.controller.ticket(env._render_params.data, _on_ticket);
    } else {
        this.context.render(this._view_path, env, callback, this);
    }
    //  console.log('get_action::rendering %s', util.inspect(this.context));
}


Base_Action.prototype._format = function (env, format, app_callback) {
    var data = env._data;

    switch (format) {
        case 'json':
            var out = {};
            out[this.rest_name()] = data;
            var content = JSON.stringify(out);
            //  console.log('content == stringify data: %s', content);
            var header = this.header(content, {'Content-Type':'application/json'});
            app_callback(200, header, content);
            break;

        case 'htm':
        case 'html':
            this.render(env, this._on_render);
            break;

        default:
            this.error(env, {type:'rest_base_no_format', method:'_format'}, app_callback);

    }
}


module.exports = Base_Action;