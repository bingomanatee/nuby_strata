var action = require('./..');
var Action = action.Action;
var _ = require('./../../../node_modules/underscore');
var util = require('util');
var strata = require('./../../../node_modules/strata');

function Edit_Action(config) {
    //  console.log('action on creation: %s', util.inspect(this));
    _.extend(this, config);
    this._init(this);
}

Edit_Action.prototype = _.clone(Action.prototype);

Edit_Action.prototype.data = function (env, on_data_callback) {
    var action = this;

    if (action.context && action.context.tracer) {
        action.context.tracer.trace(env, 'data');
    }

    this.controller.model.get_id(parseInt(env._request_params.id), function (err, data) {
      //  console.log('edit - request retrieved id = %s, data = %s', env._request_params.id, JSON.stringify(data));
        action._on_get(err, data, env, on_data_callback);
    });
}

Edit_Action.prototype._on_get = function (err, data, env, on_data_callback) {
    var action = this;

    if (err) {
        return action.error(env, {type:'data', subtype:'get_error', err:err, method:'_on_get'}, on_data_callback);
    }

    var item_name = action.controller.name;
    if (env._request_params.hasOwnProperty(item_name)) {
        var new_item = env._request_params[item_name];
    } else {
        return action.error(env, {type:'data', subtype:'no_content', method:'_on_get'}, app_callback);
    }

    if (action.context && action.context.tracer) {
        action.context.tracer.trace(env, '_on_get');
    }

  //  console.log('edit::_on_get: original data = %s', JSON.stringify(data));
  //  console.log('edit:;_on_get: new data = %s', JSON.stringify(new_item));

    action.update(env, data, new_item, on_data_callback);
}

Edit_Action.prototype.update = function (env, data, new_item, on_data_callback) {
    this.controller.model.update(new_item, on_data_callback);
}

Edit_Action.prototype.render = function (env, callback) {

    if (this.context && this.context.tracer) {
        this.context.tracer.trace(env, 'render');
    }

    if (this.ticket) {
        env._render_params.ticket = this.ticket(env._render_params.data);
    } else if (this.controller.ticket) {
        env._render_params.ticket = this.controller.ticket(env._render_params.data, env);
    }

    //  console.log('get_action::rendering %s', util.inspect(this.context));

    this.context.render(this._view_path, env, callback, this);
}


Edit_Action.prototype._on_format = function (env, data, format, app_callback) {
    switch (format) {
        case 'json':
            var out = {};
            out[this.controller.name] = data;
            var content = JSON.stringify(out);
          //  console.log('content == stringify data: %s', content);
            var header = this.header(content, {'Content-Type':'application/json'});
            app_callback(200, header, content);
            break;

        case 'htm':
        case 'html':
            this.render(env, this._on_render);
            break;

        default:
            this.error(env, {type:'no_format', method:'_on_format'}, app_callback);

    }
}
    ,

    module.exports = {
        Edit_Action:Edit_Action,
        create:function (controller, config, action_path) {

            //  console.log('EA Create:: controller = %s', util.inspect(controller));
            //   console.log('EA Create:: config = %s', util.inspect(config));
            //  console.log('EA Create:: action path = %s', action_path);

            if (!config) {
                config = {type:'default'};
            }

            config.controller = controller;
            config.context = controller.context;
            config.path = action_path;

            var action = new module.exports.Edit_Action(config);

            return action;

        }
    }