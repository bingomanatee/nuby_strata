var action = require('./..');
var Action = action.Action;
var _ = require('../../../node_modules/underscore');
var strata = require('./../../../node_modules/strata');
var util = require('util');

function Get_Action(config) {
    //  console.log('action on creation: %s', util.inspect(this));
    _.extend(this, config);
    this._init(this);
}

Get_Action.prototype = {

    _init:function (action) {
        if (!action){
            throw new Error('Action::_init - no action passed');
        }
        if (action.render_by_ct) {
            module.exports.render_by_ct(action);
        }
        if (action.error_by_ct) {
            module.exports.error_by_ct(action);
        }
        if (action.can_by_ct) {
            module.exports.can_by_ct(action);
        }
        if (action.hasOwnProperty('_layout_path') && (!action.layout)) {
            module.exports.add_layout(action);
        }
    },

    controller:null,
    context:null,

    header:function (env, values) {
        var out = {'Content-Type':'text/html'};
        if (values) {
            _.extend(out, values);
        }
        return out;
    },

    handle:function (type) {
        var action = this;

        return function (env, app_callback) {
            env._handler_type = type;
            env._action = action;
            env._render_params = {};
            action._handle(env, app_callback);
        }
    },

    _handle:function (env, app_callback) {
        var action = this;

        function _on_block(env) {
            action.error({type:'auth', env:env}, app_callback);
        }

        function _on_data(err, data) {
            action._on_data(err, data, env, app_callback);
        }

        function _on_can(env) {
            action.data(env, _on_data);
        }

        function _on_params(err, params) {
            if (env.route) {
                //    console.log('_on_params route: %s', util.inspect(env.route, true, 3));
                _.extend(params, env.route);
            }
            //  console.log('_on_params: %s', util.inspect(params));
            if (err) {
                return action.error({env:env, err:err, type:'param_error' }, app_callback);
            }

            env._request_params = params;

            action.can('respond', env, _on_can, _on_block);
        }

        var req = new strata.Request(env);
        env._request = req;
        req.params(_on_params);
    },

    _on_render:function (err, content, env, app_callback) {
        var action = this;

        function _on_content(err, content) {
            app_callback(200, action.header(env), content);
        }

        if (err) {
            return action.error({env:env, err:err, type:'param_error' }, app_callback);
        } else if (action.hasOwnProperty('layout')) {
            action.layout(env, content, _on_content);
        } else if (this.controller.hasOwnProperty('layout')) {
            action.controller.layout(env, content, _on_content, action);
        } else {
            _on_content(err, content);
        }
    },

    _data_to_env:function (env, data) {

        env._data = data;
    },

    _on_data:function (err, data, env, app_callback) {
        var action = this;

        if (err) {
            return action.error({err:err, env:env, type:'data_error'}, app_callback);
        }

        action._data_to_env(env, data);

        function _on_render(err, content) {
            action._on_render(err, content, env, app_callback);
        }

        if (env.route.hasOwnProperty('format')) {
            console.log('has format');

            var format = env.route.format.toLowerCase();
            switch (format) {
                case 'json':
                    var content = JSON.stringify(data);
                    var header = this.header(content, {'Content-Type':'application/json'});
                    app_callback(200, header, content);
                    break;

                case 'htm':
                case 'html':
                    this.render(env, _on_render);
                    break;

                default:
                    this.error({type:'no_format', env:env}, app_callback);

            }

        } else {
            console.log('route %s has no format', util.inspect(env.route));
            this.render(env, _on_render);
        }
    },

    data:function (env, callback) {
        // console.log('getting data from default');
        callback(null, {}, env);
    },

    render:function (env, callback) {
        return this.context.render(this._view_path, env, callback, this);
    },

    _view_path:null,

    error:function (params, callback) {
        strata.redirect.forward(params.env, callback, '/');
    },

    can:function (task, env, if_can, if_block) {
        if_can(env);
    }

}

Get_Action.prototype.data = function (env, on_data_callback) {
    //   console.log('env._request_params %s', util.inspect(env));
    var action = this;
    this.controller.model.get_id(parseInt(env._request_params.id), function (err, data) {
        action._on_get(err, data, env, on_data_callback);
    });
}

Get_Action.prototype._on_get = function (err, data, env, on_data_callback) {
   // console.log('_on_get: data = %s, callback = %s', util.inspect(data), on_data_callback.toString());
    on_data_callback(err, data);
}

Get_Action.prototype.render = function (env, callback) {
    if (this.ticket) {
        env._render_params.ticket = this.ticket(env._render_params.data);
    } else if (this.controller.ticket) {
        env._render_params.ticket = this.controller.ticket(env._render_params.data, env);
    }

    //  console.log('get_action::rendering %s', util.inspect(this.context));

    this.context.render(this._view_path, env, callback, this);
}

module.exports = {
    Get_Action:Get_Action,

    create:function (controller, config, action_path) {

        if (!config) {
            config = {type:'default'};
        }

        config.controller = controller;
        config.context = controller.context;
        config.path = action_path;

        var action = new module.exports.Get_Action(config);
        //  console.log('get controller: %s', util.inspect(action.controller));

        return action;

    }
}