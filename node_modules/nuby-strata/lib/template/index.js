var _ = require('./../../node_modules/underscore');

/**
 *  a class for formatting text, specifically designed for layouts.
 *  note that _init must be called to register any static directories needed.
 *  Also, the _init is an extension point for custom callback based initialization.
 *
 * @param config
 * @param template_dir - the directory the template is in, relative to context.ROOT
 */
function Template(config, template_dir) {
    _.extend(this, config);
    if (!this.template_dir) {
        this.template_dir = template_dir;
    }
}

Template.prototype = {
    template_dir:'',
    file_dir: '',
    _file_dir: function(){
        if (!this.file_dir){
            return this.template_dir;
        }
        return this.file_dir;
    },
    template_filename: 'template.html',
    prefix:'',
    index:'',
    context:null,

    /**
     * the callback expects the tempate to pass itself as the second paramteter
     *
     * @param context
     * @param callback
     */
    init:function (context, callback) {
        var nuby_strata = require('./../index');
        nuby_strata.loader.static.register(this._file_dir(), this.index, this.prefix);
        this.context = context;
        if (this._init && _.isFunction(this._init)) {
            this._init(context, callback);
        } else {
            callback(null, this);
        }
    },

    template_file_path:function () {
        return this.context.ROOT + this.template_dir + '/' + this.template_filename;
    },

    /**
     *
     * @param env: Object:: request context
     * @param body: String the custom page content
     * @param callback: function
     * @param action: Action NOT really needed - its in env; useful for re-contextualizing
     */
    render:function (env, body, callback, action) {

        if (!action) {
            action = env._action;
        }

        //@TODO: hooks for panels etc.

        this.context.layout(this.template_file_path(), env, body, callback, action);
    }

}


module.exports = Template;