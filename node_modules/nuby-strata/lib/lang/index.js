var fs = require('fs');
var _ = require('underscore');
var util = require('util');

module.exports = function (dict, lang) {

    this.lang = lang || 'en_us',

        this._al = null,
        this._terms = {},
        this._dict = dict;
    this._init_al();
}

module.exports.prototype = {

    avail_langs:function () {
        return this._al;
    },

    set_dict:function (d) {
        d = d.replace(/\/$/, '');
        this._dict = d;
    },

    lang_exists:function (l, throw_err, ctx) {
        if (_.contains(exports.avail_langs(), l)) {
            return true;
        } else if (throw_err) {
            if (ctx) {
                throw new Error(ctx.replace(/%lang%/g, l).replace(/%dir%/g, __dirname));
            } else {
                throw new Error(__dirname, new String('%dir%: attempt tu use lanugage %lang% failed.')
                    .replace(/%lang%/g, l).replace(/%dir%/g, __dirname));
            }
        } else {
            return false;
        }
    },

    set_lang:function (l) {
        if (exports.lang_exists(l, true)) {
            exports.lang = l;
            this._load_lang(l);
        }
    },

    term:function (t, l, no_default) {
        if (!l) {
            l = this.lang;
        }

        if (this.lang_exists(l, true)) {
            if (!this._terms.hasOwnProperty(l)) {
                this._load_lang(l);
            }
            if (this._terms[l].hasOwnProperty(t)) {
                return this._terms[l][t];
            } else if (no_default) {
                throw new Error(util.format('%s: cannot find term %s in language %s', __dirname, t, l));
            } else if (l != this.lang) {
                return '&laquo' + this.term(t) + '&raquo';
            } else {
                throw new Error(util.format('%s: cannot find term %s in language %s', __dirname, t, l));
            }
        }
    },

    _load_lang:function (l) {
        var txt = fs.readfileSync(this._dict + '/' + l + '/terms.txt');
        var terms = txt.split("\n");
        delete txt;
        if (!this._terms.hasOwnProperty(l)) {
            this._terms[l] = {};
        }
        terms.forEach(function (l) {
            var k = l.indexOf('>');
            if (k > 0) {
                var term = l.substr(0, k);
                var meaning = l.substr(k + 1);
                this._terms[l][term] = meaning;
            }
        });
    },

    _init_al:function () {
        var items = fs.readdirSync(this._dict);
        this._al = [];
        items.forEach(function (item) {
            if (fs.statSync(__dirname + '/dict/' + item).isDirectory()) {
                this._al.push[item];
            }
        });
    }

}
