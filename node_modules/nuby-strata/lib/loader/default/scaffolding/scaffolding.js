var strata = require('../../../../node_modules/strata/lib');
var util = require('util');

function Scaffolding(action, type) {

    this.action = action;
    this.type = type;

}

Scaffolding.prototype = {

    handle:function (env, app_callback) {
        var action = this.action;
        var type = this.type;

        env._handler_type = this.type;
        env._action = action;
        env._render_params = {};

        function _on_block(env) {
            action.error({type:'auth', env:env}, app_callback);
        }

        function _on_content(err, content) {
            app_callback(200, {}, content);
        }

        function _on_render(err, content) {
            if (err) {
                return action.error({env:env, err:err, type:'param_error' }, app_callback);
            }
            if (action.hasOwnProperty('layout')) {
                action.layout(env, content, _on_content);
            } else if (action.controller.hasOwnProperty('layout')) {
                action.controller.layout(env, content, _on_content, action);
            } else {
                _on_content(err, content);
            }
        }

        function _on_data(err, data) {
            env._data = data;
            env._render_params.data = data;
            env._render_params[action.name] = data;
            if (type == 'format') {
                var format = env.route.format.toLowerCase();
                switch (format) {
                    case 'json':
                        app_callback(200, {'Content-Type':'application/json'}, JSON.stringify(data));
                        break;

                    case 'htm':
                    case 'html':
                        action.render(env, _on_render);
                        break;

                    default:
                        action.error({type:'no_format', env:env}, app_callback);

                }

            } else {
                action.render(env, _on_render);
            }

        }

        function _on_can(env) {
            action.data(env, _on_data);
        }

        function _on_params(err, params) {
            if (err) {
                return action.error({env:env, err:err, type:'param_error' }, app_callback);
            }

            env._request_params = params;

            action.can('respond', env, _on_can, _on_block);
        }

        var req = new strata.Request(env);
        env._request = req;
        req.params(_on_params);
    }
}

module.exports = {
    Scaffolding:Scaffolding,

    create:function (action, type) {
        return new Scaffolding(action, type);
    }

}