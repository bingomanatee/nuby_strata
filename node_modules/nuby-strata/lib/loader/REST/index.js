var fs = require('fs');
var path = require('path');
var _ = require('underscore');

var util = require('util');
var ondir = require('./../../support/ondir');

/**
 * DEFAULT LOADER: handles a basic controller handler.
 */
module.exports = {

    load_actions:function (controller, callback, app) {
        var nuby_strata = require('./../..');
        //  console.log('load_actions nuby strata path %s', path.resolve(__dirname, './../..'));
        // console.log('nuby_strata: %s', util.inspect(nuby_strata, false, 0));


        _load_rest_action(app, 'get', controller);
        _load_rest_action(app, 'edit', controller);
        _load_rest_action(app, 'put', controller);
        _load_rest_action(app, 'delete', controller);


    }
}

function _load_rest_action(app, name, controller) {
    var action_path = controller.path + '/actions' + '/' + name;
    var action_file = action_path + '/index.js'
    if (path.existsSync(action_file)) {
        var action_config = require(action_path);
        var action;
        if (action_config.hasOwnProperty('custom_action')) {
          //  console.log('custom %s action', name);
            action = action_config;
        } else {
            var loader_path = path.resolve(__dirname, '../../action/REST/' + name);
            //console.log('loader path for %s is %s', name, loader_path);
            var action_class = require(loader_path);
            //  console.log(' ------- CREATING %s ------- ', name);
            action = action_class.create(controller, action_config, action_path);
            //  console.log(' ------- DONE %s ------- ', name);
        }

        var routes = _rest_routes(name, controller.name);

        routes.forEach(function (action_route) {
            var route_path = action_route.path;
         //   console.log('routing for %s::%s', route_path, action_route.method);
            app.route(route_path, action.handle(action_route.type), action_route.method);
        });
    }
    else {
        console.log('no %s path %s', name, action_file);
    }
}


function _rest_routes(name, basename) {

    switch (name) {

        case 'delete':
            return [
                {
                    method:'DELETE',
                    type:'',
                    path:util.format('/%s/:id', basename)
                },
                {
                    method:'GET',
                    type:'form',
                    path:util.format('/%s/:id/delete', basename)
                },
                {
                    method:'GET',
                    type:'',
                    path:util.format('/%s/:id/destroy', basename)
                },
                {
                    method:'GET',
                    type:'format',
                    path:util.format('/%s/:id/destroy\.:format', basename)
                },
                {
                    method:'GET',
                    type:'format',
                    path:util.format('/%s/:id\.:format', basename)
                }

            ];
            break;
        case 'get':
            return [
                {
                    method:'GET',
                    type:'',
                    path:util.format('/%s/:id', basename)
                },
                {
                    method:'GET',
                    type:'form',
                    path:util.format('/%s/:id/show', basename)
                },
                {
                    method:'GET',
                    type:'format',
                    path:util.format('/%s/:id\.:format', basename)
                }

            ];
            break;

        case 'edit':
            return [
                {
                    method:'GET',
                    type:'form',
                    path:util.format('/%s/:id/edit', basename)
                },
                {
                    method:'POST',
                    type:'',
                    path:util.format('/%s/:id', basename)
                },
                {
                    method:'POST',
                    type:'format',
                    path:util.format('/%s/:id\.:format', basename)
                }
            ]
            break;

        case 'put':
            return [
                {
                    method:'GET',
                    type:'form',
                    path:util.format('/%s/:id/put', basename)
                },
                {
                    method:'POST',
                    type:'',
                    path:util.format('/%s/:id/add', basename)
                },
                {
                    method:'POST',
                    type:'format',
                    path:util.format('/%s/:id/add\.:format', basename)
                },
                {
                    method:'PUT',
                    type:'',
                    path:util.format('/%s/', basename)
                }
            ]
            break;
    }

}