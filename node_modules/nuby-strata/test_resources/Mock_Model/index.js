var _ = require('./../../../../node_modules/underscore');

function Mock_Model(data) {
    this._data = data;

}

Mock_Model.prototype = {

    get_id:function (id, callback) {
        var out = false;

        var self = this;

        this._data.forEach(function (item) {
            if (item.id == id) {
                out = item;
            }
        })
        if (out) {
            callback(null, out);
        } else {
            callback(new Error('Cannot find id ' + id));
        }
    },

    _new_id: function(){
        var id = 0;
        this._data.forEach(function(item){
            id = Math.max(item.id, id);
        });

        return id + 1;
    },

    insert: function(item, callback){
        item.id = this._new_id();
        this._data.push(item);
        this.last_insert_id = item.id;
        callback(null, item);
    },

    del: function(item, callback){
        var id;
        if (_.isObject(item)){
            id = parseInt(item.id);
        } else {
            id = parseInt(item);
        }

        var deleted = false;
        var delete_index = -1;

        this._data.forEach(function(item, index){
            if (!deleted){
                if (item.id == id){
                    delete_index = index;
                    deleted = true;
                }
            }
        })
        if (deleted){
            var item = this._data[delete_index];
            delete this._data[delete_index];
            callback(null, item);
        } else {
            callback(new Error('Cannot find item ' + id));
        }
    },

    last_insert_id: 0,

    update: function(item, callback, existing){
        var changed = false;
        var model = this;
        this._data.forEach(function(old_item, i){
            if ((!changed) && (old_item.id == item.id)){
                model._data[i] = item;
                changed = true;
            }
        });

        if (changed){
            callback(null, item);
        } else {
            callback(new Error('cannot find ' + JSON.stringify(item)));
        }
    }

}

module.exports = Mock_Model;