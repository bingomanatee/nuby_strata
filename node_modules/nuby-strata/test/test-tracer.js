var Tracer = require('./../lib/tracer');
var data;
var data_flat;
var _ = require('./../node_modules/underscore');
var tracer;
var data_less_c_plus_e;
var util = require('util');
var data_less_c_plus_e_less_dbar_plus_d_pho;

module.exports = {
    setUp:function (setup_callback) {
        data = {a:1,
            b:2,
            c:'alpha',
            d:{
                foo:true,
                bar:false,
                vey:true
            } };


                data_less_c_plus_e = {a:1,
                    b:2,
                    d:{
                        foo:true,
                        bar:false,
                        vey:true
                    },
                    e:'beta'};

        data_less_c_plus_e_less_dbar_plus_d_pho = {a:1,
            b:2,
            d:{
                foo:true,

                vey:true,
                pho: false
            },
            e:'beta'};

        data_flat = {
            a:1,
            b:2,
            c:'alpha',
            'd::foo':true,
            'd::bar':false,
            'd::vey':true
        };
        tracer = new Tracer('test');
        setup_callback();
    },

    flatten:function (test) {
        var dflat = tracer.flat(data);
   //     console.log("dflat: %s, flat: %s", util.inspect(dflat), util.inspect(data_flat));
        test.deepEqual(dflat, data_flat, 'tracer flatten');
        test.done();

    },

    tracing: function(test){
        tracer = new Tracer('test 2');
        tracer.trace(data, 'START');
        test.equal(tracer.log[0].data, util.inspect(data));

        tracer.trace(data_less_c_plus_e, "LLESS C PLUS E");
        test.equal(tracer.log[1].data.replace(/[ \n]+/g, ''),
            "{new:{e:'beta'},changed:{},removed:{c:'alpha'}}",'diff');

        tracer.trace(data_less_c_plus_e_less_dbar_plus_d_pho, "LESS D BAR PLUS D PHO");
        test.equal(tracer.log[2].data.replace(/[ \n]+/g, ''),
            "{new:{'d::pho':false},changed:{},removed:{'d::bar':false}}")
        test.done();
    }
}