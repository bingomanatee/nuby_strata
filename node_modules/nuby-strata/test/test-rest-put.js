var mock = require('./../node_modules/strata/lib/mock.js');
var util = require('util');
var app_maker = require('./../test_resources/simple_server/app.js');
var model = require('./../test_resources/simple_server/apps/rest_path/model.js');
var item;
var context;
var app;
var env_seed;
var new_item;
var _ = require("./../node_modules/underscore");
var strata = require("./../node_modules/strata");
var BufferedStream = require("./../node_modules/strata/node_modules/bufferedstream");
var content_type = 'application/json';
var Tracer = require('./../lib/tracer');

module.exports = {
    setUp:function (setup_callback) {
        model.reset();
        new_item = {name:'dave'};

        var content = JSON.stringify({rest_path:new_item});
        var contentLength = Buffer.byteLength(content).toString(10);
        var serverName = "example.org";
        var user_agent = "test suite";

        var env_data = {protocol:"http:",
            protocolVersion:"1.1",
            requestMethod:"POST",
            requestTime:new Date,
            remoteAddr:"127.0.0.1",
            serverName:serverName,
            serverPort:"443",
            pathInfo:"/rest_path/0/add.json",
            userAgent:user_agent,
            input:content,
            headers:{
                "Host":serverName,
                "User-Agent":user_agent,
                "Content-Length":contentLength,
                "Content-Type":content_type
            }
        };

        env_seed = mock.env(env_data);
        env_seed.headers = {
            "Host":serverName,
            "User-Agent":user_agent,
            "Content-Length":contentLength,
            "Content-Type":content_type
        }

        app_maker(function (err, ctx) {
            context = ctx;
            app = context.app;
            //  console.log('setup done; app = %s', util.inspect(app));
            setup_callback();
        });

    },

    test_put:function (test) {
       // context.tracer = new Tracer('test_edit');
        mock.request(env_seed, app, function (err, status, headers, body) {
            var inserted_new_item = _.clone(new_item);
            inserted_new_item.id = model.last_insert_id;

            var content = JSON.stringify({rest_path:inserted_new_item});
            test.equals(body, content, 'test put body should equal ' + content);
            test.equals(headers['Content-Type'], content_type,
                'content-type should equal ' + content_type);

            model.get_id(inserted_new_item.id, function (err, item_1) {
                if (err) {
                    throw err;
                } else {
                    test.equals(item_1.name, new_item.name);
                    test.done();
                }

            });
        })

    }
}

function _echo(err, status, headers, body) {
    console.log('request::echo err: ', util.inspect(err));
    console.log('request::echo status', util.inspect(status));
    console.log('request::echo headers', util.inspect(headers));
    console.log('request::echo body', util.inspect(body));
}
