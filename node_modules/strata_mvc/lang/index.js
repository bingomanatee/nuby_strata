var fs = require('fs');
var _ = require('underscore');
var util = require('util');

exports = {

    lang: 'en_us',

    _al: null,
    _terms: {},
    _dict: __dirname,

    avail_langs: function() {
        if (!exports._al) {
            init_al();
        }

        return _al;
    },

    set_dict: function(d) {
        d = d.replace(/\/$/, '');
        exports._dict = d;
    },

    lang_exists: function(l, throw_err, ctx) {
        if (_.contains(exports.avail_langs(), l)) {
            return true;
        } else if (throw_err) {
            if (ctx) {
                throw new Error(ctx.replace(/%lang%/g, l).replace(/%dir%/g, __dirname));
            } else {
                throw new Error(__dirname, new String('%dir%: attempt tu use lanugage %lang% failed.')
                    .replace(/%lang%/g, l).replace(/%dir%/g, __dirname));
            }
        }
    },

    set_lang: function(l) {
        if (exports.lang_exists(l, true)) {
            exports.lang = l;
            _load_lang(l);
        }
    },

    term: function (t, l, no_default) {
        if (!l) {
            l = exports.lang;
        }

        if (exports.lang_exists(l, true)) {
            if (!exports._terms.hasOwnProperty(l)) {
                _load_lang(l);
            }
            if (exports._terms[l].hasOwnProperty(t)) {
                return exports._terms[l][t];
            } else if (no_default) {
                throw new Error(util.format('%s: cannot find term %s in language %s', __dirname, t, l));
            } else if (l != exports.lang) {
                return '&laquo' + exports.term(t) + '&raquo';
            } else {
                throw new Error(util.format('%s: cannot find term %s in language %s', __dirname, t, l));
            }
        }
    }
}

function _load_lang(l) {
    var txt = fs.readfileSync(exports._dict + '/' + l + '/terms.txt');
    var terms = txt.split("\n");
    delete txt;
    if (!exports._terms.hasOwnProperty(l)) {
        exports._terms[l] = {};
    }
    terms.forEach(function(l) {
        var k = l.indexOf('>');
        if (k > 0) {
            var term = l.substr(0, k);
            var meaning = l.substr(k + 1);
            exports._terms[l][term] = meaning;
        }
    });
}

function init_al() {
    var items = fs.readdirSync(__dirname + '/dict');
    exports._al = [];
    items.forEach(function(item) {
        if (fs.statSync(__dirname + '/dict/' + item).isDirectory()) {
            exports._al.push[item];
        }
    });
}